Compilers That (Intentionally) Change the Result Your Program Produces | Department of Computer Science | University of Illinois at Chicago Skip to the content of this page , the main menu , the site search form , the site home page . UIC Logo Department of Computer Science Search the site Toggle Menu Search UIC Logo Department of Computer Science Department of Computer Science Main Menu Undergraduate Expand Undergraduate menu Admitted Students Admissions Accreditation CS Major CS Minor Courses Internships and Jobs Student Groups Student Profiles Student Resources Women in CS Graduate Expand Graduate menu Admitted Students Admissions Courses MS Program PhD Program PhD Dissertations Post-Graduation Outcomes Student Profiles Student Resources Research Expand Research menu Research Areas Labs Lectures and Seminars Research Experiences for Undergraduates Faculty and Staff Expand Faculty and Staff menu Department Head Faculty Emeritus Faculty Adjunct Faculty Staff Faculty Resources Open Positions News Expand News menu News Stories Press Mentions Events Expand Events menu CS calendar Student Opportunities Eyebrow menu Break Through Tech Giving Alumni UIC Engineering Home UIC menu UIC.edu Campus Map Search Compilers That (Intentionally) Change the Result Your Program Produces Martin C. Rinard Massachusetts Institute of Technology Thrusday, November 10, 2011 11:00 a.m., 1000 SEO Building To view the video recording of this seminar please contact: tmatthes@uic.edu Abstract: We present a new program analysis framework that uses probabilistic and statistical reasoning to justify the application of transformations that may change, within probabilistic and statistical?bounds, the result that the program produces. ?We call such transformations accuracy-aware transformations because they are designed to manipulate the accuracy of the computation. ?This broad scope gives the transformations great freedom to influence desirable program properties such as performance and reliability. We show how to apply this approach to justify several program transformations. We also present experimental results that illustrate the potential benefits of this approach. Bio: Martin Rinard is a Professor in the MIT Department of Electrical Engineering and Computer Science and a member of the MIT Computer Science and Artificial Intelligence Laboratory. His research interests include parallel and distributed computing, programming languages, program analysis, program verification, software engineering, and computer systems. Much of his current research focuses on techniques that enable software systems to survive otherwise fatal errors or security attacks. Professor Rinard is an ACM Fellow and holds many awards including the Most Influential Paper in 20 Years Award in the area of Concurrent Constraint Programming (awarded by The Association for Logic Programming in 2004). For more information see: http://people.csail.mit.edu/rinard/ Host: Professor Lenore Zuck