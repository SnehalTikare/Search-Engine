{
    "origin_link": "https://ethos.lab.uic.edu/projects/",
    "title": "Projects | Ethos Laboratory | University of Illinois at Chicago",
    "contents": "               Skip to the content of this page ,  the main menu , the secondary menu , the site search form , the site home page .           Ethos Laboratory     Search the site     Toggle Menu      Search                  Ethos Laboratory      Ethos Laboratory   Main Menu    People    Projects    Papers    About Us           Getting Started    Paper Reading Seminar    Binary install into VirtualBox    The Advanced Programming Seminar Series          Eyebrow menu    Computer Science    College of Engineering    UIC menu    UIC.edu    Campus Map       Search                     Projects      View Menu               Projects     Kernel hacking         Kernel hacking   Building an OS requires building a kernel. We are implementing a kernel in C on top of Xen. Ethos started from a small OS in Xen called Mini-OS which provided low-level facilties which we extended to make a full OS supporting processes, a network stack, filesystem, authentication, etc. Kernel hacking divides into architecture dependent code (eg., for interrupts, context switching, paging) and architecture independent code (eg., authorization, authentication, file systems, etc.)        Distributed authentication         Distributed authentication   We’re working on building highly secure distributed services. The first service is SayI, an authentication service, which will be used in conjunction with MinimaLT.        Ethos shell         Ethos shell   El. El is intended to combine the best part of shells with the best part of scripting languages. Also, the building of tools to use with the shell.        Ethos (graphics) markup language         Ethos (graphics) markup language:   Em. Em is Ethos’ graphic markup language, intended to make it very simple to build smartphone-type applications.        User-space OS components         User-space OS components:   Much of an OS is written in user space. There are many user-space components to build, including package management, tools (see El), and OS abstractions. We’re using Go and El to write these routines.        Applications:         Applications:   An OS without applications is incomplete. We need to see what effect Ethos has on application code. The first application will probably be secure messaging.        High speed crypto         High speed crypto:   Ethos relies on NaCL, a high speed crypto library which provides all Ethos’ crypto primitives (PI: Daniel J. Bernstein ).             Paper List by Themes     Authentication         Authentication    Authentication in the Taos operating system (wobber94authentication). Edward Wobber et al. Jan. 24, 2013 (Presented by Dr. Solworth)  Kerberos: An Authentication Service for Open Network Systems (steiner88kerberos). Jennifer G. Steiner et al. Jan. 30, 2013 (Presented by Yaohua)  Ten Risks of PKI: What You’re not Being Told about Public Key Intrustructure (ellison00pkiRisks). Carl Ellison and Bruce Schneier. Feb. 6, 2013 (Presented by Wenyuan)  Building Secure High-Performance Web Services with OKWS (krohn04okws). Maxwell Krohn. Feb. 27, 2013 (Presented by Mike)  Labels and Event Processes in the Asbestos Operating System (efstathopoulos05labels). Petros Efstathopoulos et al. Mar. 6, 2013 (Presented by Yaohua)         Ethos Papers         Ethos Papers    Ethos’ Distributed Types (git repo sent in email). W. Michael Petullo et al. Mar. 13, 2013 (Presented by Xu)  Authentication in Ethos (git repo sent in email). W. Michael Petullo and Jon A. Solworth. Mar. 21, 2013 (Presented by Siming)  Simple-to-use, Secure-by-design Networking in Ethos (git repo sent in email). W. Michael Petullo and Jon A. Solworth. Mar. 27, 2013 (Presented by Yaohua)  MinimaLT: Minimal-latency Networking Through Better Security (git repo sent in email). Anonymous. Apr. 3, 2013 (Presented by Xu)  gAuth: Internet-Scale User Authentication (git repo sent in email). Anonymous. Apr. 17, 2013 (Presented by Giovanni)  gRev: Efficient and Timely Certificate Revocation at Global Scale (git repo sent in email). Anonymous. Apr. 24, 2013 (Presented by Luca)         Memory Allocation         Memory Allocation    Design of a General Purpose Memory Allocator for the 4.3BSD UNIX Kernel (mckusick88kernelMalloc). Marshall Krik McKusick and Michael J. Karels. May 1, 2013              Project History     Project History         Project History   In 2007, we set out to build an operating system which would give rise to far more secure systems than are available today. The genesis for this work was a 2006 panel at Computer and Communications Security (CCS) on botnets. It became clear that our computing base has been broadly compromised by attackers. These attackers are professional, highly skilled, and in it for the money. The operate overseas, beyond the reach of their victim’s national law enforcement and are largely anonymous.  In the war against these attackers we have clearly lost, each year we fall further behind. Its time to change the rules of the game.  Ethos is our answer to this threat. Ethos means “gathering place” and the “characteristics or virtues of a people”. Our purpose is to build a system (“gathering place”) in which more highly robust applications result (“characteristics or virtues”). We hope to craft an environment which will lead to a whole ecosystem which is more secure. In this goal, we are inspired by UNIX–which is far more than just an operating system–it also deeply influences user space.  Building an operating system is an enormous undertaking. It is estimated that even “free” operating systems such as Linux are amazingly costly, costing over one billion dollars. (Almost all this expense is in device drivers and multiple architectures.) Building sufficient applications is a far larger goal. This is one reason why new operating systems have been unsuccessful.  In addition, new operating systems face the application trap : there are no users for a system because there are no applications; and no one will write applications because there are no users .  The solution to both of these problems is Virtual Machines (VMs). Since VMs allow multiple OS to run on a computer, it is no longer necessary to choose one OS; multiple OSs can be used simultaneously. Hence, one significant application can justify running an OS. Second, the VM provides an abstract hardware architecture which is far simpler then the vast variety of computers extant. The drivers for the real hardware are provided by the VM. We are using Xen as our VM because we believe it is a good security architecture on which to build an OS.                           ",
    "outlinks": [
        "https://uic.edu/about/job-opportunities",
        "https://www.cs.uic.edu/",
        "https://ethos.lab.uic.edu/background/",
        "https://ethos.lab.uic.edu/background/binary-install-into-virtualbox/",
        "https://catalog.uic.edu/ucat/academic-calendar/",
        "https://ethos.lab.uic.edu/background/getting-started/",
        "https://ethos.lab.uic.edu/background/paper-reading-seminar/",
        "https://ethos-lab.red.uic.edu/profiles/bernstein-daniel-j/",
        "https://ethos.lab.uic.edu/papers/",
        "https://library.uic.edu/",
        "https://ready.uic.edu/digital-materials/uic-safe-mobile-app/",
        "https://disabilityresources.uic.edu/",
        "https://ethos.lab.uic.edu/background/the-advanced-programming-seminar-series/",
        "https://maps.uic.edu/",
        "https://engineering.uic.edu/",
        "https://dos.uic.edu/student-veterans-affairs/",
        "https://uic.edu/",
        "https://uihealth.uic.edu/",
        "https://ethos.lab.uic.edu/people/",
        "https://www.uic.edu/apps/departments-az/search",
        "https://emergency.uic.edu/",
        "https://today.uic.edu/events",
        "https://ethos.lab.uic.edu/",
        "https://today.uic.edu/"
    ]
}